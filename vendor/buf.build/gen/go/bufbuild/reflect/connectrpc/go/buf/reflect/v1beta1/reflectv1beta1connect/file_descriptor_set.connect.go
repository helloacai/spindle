// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/reflect/v1beta1/file_descriptor_set.proto

package reflectv1beta1connect

import (
	v1beta1 "buf.build/gen/go/bufbuild/reflect/protocolbuffers/go/buf/reflect/v1beta1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileDescriptorSetServiceName is the fully-qualified name of the FileDescriptorSetService service.
	FileDescriptorSetServiceName = "buf.reflect.v1beta1.FileDescriptorSetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileDescriptorSetServiceGetFileDescriptorSetProcedure is the fully-qualified name of the
	// FileDescriptorSetService's GetFileDescriptorSet RPC.
	FileDescriptorSetServiceGetFileDescriptorSetProcedure = "/buf.reflect.v1beta1.FileDescriptorSetService/GetFileDescriptorSet"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fileDescriptorSetServiceServiceDescriptor                    = v1beta1.File_buf_reflect_v1beta1_file_descriptor_set_proto.Services().ByName("FileDescriptorSetService")
	fileDescriptorSetServiceGetFileDescriptorSetMethodDescriptor = fileDescriptorSetServiceServiceDescriptor.Methods().ByName("GetFileDescriptorSet")
)

// FileDescriptorSetServiceClient is a client for the buf.reflect.v1beta1.FileDescriptorSetService
// service.
type FileDescriptorSetServiceClient interface {
	// GetFileDescriptorSet returns a set of file descriptors that can be used to build
	// dynamic representations of a schema and/or service interfaces. This can also be
	// used for server reflection.
	GetFileDescriptorSet(context.Context, *connect.Request[v1beta1.GetFileDescriptorSetRequest]) (*connect.Response[v1beta1.GetFileDescriptorSetResponse], error)
}

// NewFileDescriptorSetServiceClient constructs a client for the
// buf.reflect.v1beta1.FileDescriptorSetService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileDescriptorSetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileDescriptorSetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileDescriptorSetServiceClient{
		getFileDescriptorSet: connect.NewClient[v1beta1.GetFileDescriptorSetRequest, v1beta1.GetFileDescriptorSetResponse](
			httpClient,
			baseURL+FileDescriptorSetServiceGetFileDescriptorSetProcedure,
			connect.WithSchema(fileDescriptorSetServiceGetFileDescriptorSetMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileDescriptorSetServiceClient implements FileDescriptorSetServiceClient.
type fileDescriptorSetServiceClient struct {
	getFileDescriptorSet *connect.Client[v1beta1.GetFileDescriptorSetRequest, v1beta1.GetFileDescriptorSetResponse]
}

// GetFileDescriptorSet calls buf.reflect.v1beta1.FileDescriptorSetService.GetFileDescriptorSet.
func (c *fileDescriptorSetServiceClient) GetFileDescriptorSet(ctx context.Context, req *connect.Request[v1beta1.GetFileDescriptorSetRequest]) (*connect.Response[v1beta1.GetFileDescriptorSetResponse], error) {
	return c.getFileDescriptorSet.CallUnary(ctx, req)
}

// FileDescriptorSetServiceHandler is an implementation of the
// buf.reflect.v1beta1.FileDescriptorSetService service.
type FileDescriptorSetServiceHandler interface {
	// GetFileDescriptorSet returns a set of file descriptors that can be used to build
	// dynamic representations of a schema and/or service interfaces. This can also be
	// used for server reflection.
	GetFileDescriptorSet(context.Context, *connect.Request[v1beta1.GetFileDescriptorSetRequest]) (*connect.Response[v1beta1.GetFileDescriptorSetResponse], error)
}

// NewFileDescriptorSetServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileDescriptorSetServiceHandler(svc FileDescriptorSetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileDescriptorSetServiceGetFileDescriptorSetHandler := connect.NewUnaryHandler(
		FileDescriptorSetServiceGetFileDescriptorSetProcedure,
		svc.GetFileDescriptorSet,
		connect.WithSchema(fileDescriptorSetServiceGetFileDescriptorSetMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/buf.reflect.v1beta1.FileDescriptorSetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileDescriptorSetServiceGetFileDescriptorSetProcedure:
			fileDescriptorSetServiceGetFileDescriptorSetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileDescriptorSetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileDescriptorSetServiceHandler struct{}

func (UnimplementedFileDescriptorSetServiceHandler) GetFileDescriptorSet(context.Context, *connect.Request[v1beta1.GetFileDescriptorSetRequest]) (*connect.Response[v1beta1.GetFileDescriptorSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.reflect.v1beta1.FileDescriptorSetService.GetFileDescriptorSet is not implemented"))
}
