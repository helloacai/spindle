// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package sink

import (
	"fmt"
	"strings"
)

const (
	// SubstreamsModeDevelopment is a SubstreamsMode of type Development.
	SubstreamsModeDevelopment SubstreamsMode = iota
	// SubstreamsModeProduction is a SubstreamsMode of type Production.
	SubstreamsModeProduction
)

const _SubstreamsModeName = "DevelopmentProduction"

var _SubstreamsModeNames = []string{
	_SubstreamsModeName[0:11],
	_SubstreamsModeName[11:21],
}

// SubstreamsModeNames returns a list of possible string values of SubstreamsMode.
func SubstreamsModeNames() []string {
	tmp := make([]string, len(_SubstreamsModeNames))
	copy(tmp, _SubstreamsModeNames)
	return tmp
}

var _SubstreamsModeMap = map[SubstreamsMode]string{
	SubstreamsModeDevelopment: _SubstreamsModeName[0:11],
	SubstreamsModeProduction:  _SubstreamsModeName[11:21],
}

// String implements the Stringer interface.
func (x SubstreamsMode) String() string {
	if str, ok := _SubstreamsModeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SubstreamsMode(%d)", x)
}

var _SubstreamsModeValue = map[string]SubstreamsMode{
	_SubstreamsModeName[0:11]:  SubstreamsModeDevelopment,
	_SubstreamsModeName[11:21]: SubstreamsModeProduction,
}

// ParseSubstreamsMode attempts to convert a string to a SubstreamsMode
func ParseSubstreamsMode(name string) (SubstreamsMode, error) {
	if x, ok := _SubstreamsModeValue[name]; ok {
		return x, nil
	}
	return SubstreamsMode(0), fmt.Errorf("%s is not a valid SubstreamsMode, try [%s]", name, strings.Join(_SubstreamsModeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x SubstreamsMode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SubstreamsMode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSubstreamsMode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
