// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sf/substreams/intern/v2/service.proto

package pbssinternal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Substreams_ProcessRange_FullMethodName = "/sf.substreams.internal.v2.Substreams/ProcessRange"
)

// SubstreamsClient is the client API for Substreams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubstreamsClient interface {
	ProcessRange(ctx context.Context, in *ProcessRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProcessRangeResponse], error)
}

type substreamsClient struct {
	cc grpc.ClientConnInterface
}

func NewSubstreamsClient(cc grpc.ClientConnInterface) SubstreamsClient {
	return &substreamsClient{cc}
}

func (c *substreamsClient) ProcessRange(ctx context.Context, in *ProcessRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProcessRangeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Substreams_ServiceDesc.Streams[0], Substreams_ProcessRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessRangeRequest, ProcessRangeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Substreams_ProcessRangeClient = grpc.ServerStreamingClient[ProcessRangeResponse]

// SubstreamsServer is the server API for Substreams service.
// All implementations should embed UnimplementedSubstreamsServer
// for forward compatibility.
type SubstreamsServer interface {
	ProcessRange(*ProcessRangeRequest, grpc.ServerStreamingServer[ProcessRangeResponse]) error
}

// UnimplementedSubstreamsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubstreamsServer struct{}

func (UnimplementedSubstreamsServer) ProcessRange(*ProcessRangeRequest, grpc.ServerStreamingServer[ProcessRangeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessRange not implemented")
}
func (UnimplementedSubstreamsServer) testEmbeddedByValue() {}

// UnsafeSubstreamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubstreamsServer will
// result in compilation errors.
type UnsafeSubstreamsServer interface {
	mustEmbedUnimplementedSubstreamsServer()
}

func RegisterSubstreamsServer(s grpc.ServiceRegistrar, srv SubstreamsServer) {
	// If the following call pancis, it indicates UnimplementedSubstreamsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Substreams_ServiceDesc, srv)
}

func _Substreams_ProcessRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubstreamsServer).ProcessRange(m, &grpc.GenericServerStream[ProcessRangeRequest, ProcessRangeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Substreams_ProcessRangeServer = grpc.ServerStreamingServer[ProcessRangeResponse]

// Substreams_ServiceDesc is the grpc.ServiceDesc for Substreams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Substreams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.substreams.internal.v2.Substreams",
	HandlerType: (*SubstreamsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessRange",
			Handler:       _Substreams_ProcessRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/substreams/intern/v2/service.proto",
}
